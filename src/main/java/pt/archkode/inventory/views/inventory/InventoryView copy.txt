package pt.archkode.inventory.views.inventory;

import java.util.Optional;

import org.springframework.data.domain.PageRequest;

import com.vaadin.flow.component.UI;
import com.vaadin.flow.component.grid.Grid;
import com.vaadin.flow.component.grid.GridVariant;
import com.vaadin.flow.component.html.Div;
import com.vaadin.flow.component.notification.Notification;
import com.vaadin.flow.router.BeforeEnterEvent;
import com.vaadin.flow.router.BeforeEnterObserver;
import com.vaadin.flow.router.PageTitle;
import com.vaadin.flow.router.Route;
import com.vaadin.flow.router.RouteAlias;
import com.vaadin.flow.spring.data.VaadinSpringDataHelpers;

import jakarta.annotation.security.RolesAllowed;
import pt.archkode.inventory.data.SampleInventory;
import pt.archkode.inventory.services.SampleInventoryService;
import pt.archkode.inventory.views.MainLayout;

@PageTitle("Inventory")
@Route(value = "/:sampleInventoryID?/:action?(edit)", layout = MainLayout.class)
@RouteAlias(value = "", layout = MainLayout.class)
@RolesAllowed("USER")
public class InventoryView extends Div implements BeforeEnterObserver {

    private final String SAMPLEINVENTORY_ID = "sampleInventoryID";
    private final Grid<SampleInventory> grid = new Grid<>(SampleInventory.class, false);

    private final SampleInventoryService sampleInventoryService;

    public InventoryView(SampleInventoryService sampleInventoryService) {
        this.sampleInventoryService = sampleInventoryService;
        addClassNames("inventory-view");

        // Create and configure Grid
        createGridLayout();

        grid.addColumn("ref").setAutoWidth(true);
        grid.addColumn("name").setAutoWidth(true);
        grid.addColumn("description").setAutoWidth(true);
        grid.addColumn("quantity").setAutoWidth(true);
        grid.addColumn("price").setAutoWidth(true);

        grid.setItems(query -> sampleInventoryService.list(
                PageRequest.of(query.getPage(), query.getPageSize(), VaadinSpringDataHelpers.toSpringDataSort(query)))
                .stream());

        grid.addThemeVariants(GridVariant.LUMO_NO_BORDER);
        grid.setSizeFull(); // This ensures the grid takes full available space

        // When a row is selected or deselected
        grid.asSingleSelect().addValueChangeListener(event -> {
            if (event.getValue() != null) {
                UI.getCurrent().navigate(String.format("/%s/edit", event.getValue().getId()));
            } else {
                UI.getCurrent().navigate(InventoryView.class);
            }
        });
    }

    @Override
    public void beforeEnter(BeforeEnterEvent event) {
        Optional<Long> sampleInventoryId = event.getRouteParameters().get(SAMPLEINVENTORY_ID).map(Long::parseLong);
        if (sampleInventoryId.isPresent()) {
            Optional<SampleInventory> sampleInventoryFromBackend = sampleInventoryService.get(sampleInventoryId.get());
            if (!sampleInventoryFromBackend.isPresent()) {
                Notification.show(
                        String.format("The requested sampleInventory was not found, ID = %s", sampleInventoryId.get()),
                        3000, Notification.Position.BOTTOM_START);
                refreshGrid();
                event.forwardTo(InventoryView.class);
            }
        }
    }

    private void createGridLayout() {
        // Create a wrapper div and add grid
        Div wrapper = new Div();
        wrapper.setClassName("grid-wrapper");
        wrapper.setSizeFull(); // Ensure wrapper takes full space
        wrapper.add(grid);

        // Add the wrapper to the layout
        add(wrapper);
        setSizeFull(); // Ensure this view takes the full available space
    }

    private void refreshGrid() {
        grid.select(null);
        grid.getDataProvider().refreshAll();
    }
}